// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace PocketJudge
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Projects.
    /// </summary>
    public static partial class ProjectsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='contest'>
            /// </param>
            public static void List(this IProjects operations, string page = default(string), string contest = default(string))
            {
                Task.Factory.StartNew(s => ((IProjects)s).ListAsync(page, contest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='contest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ListAsync(this IProjects operations, string page = default(string), string contest = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ListWithHttpMessagesAsync(page, contest, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void Read(this IProjects operations, string id)
            {
                Task.Factory.StartNew(s => ((IProjects)s).ReadAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ReadAsync(this IProjects operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ReadWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
